{"version":3,"file":"svg-turtle.js","sources":["../node_modules/javascript-interface-library/dist/javascript-interface-library.esm.js","../src/svg-turtle.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                        JavaScript Interface Library                        //\n//----------------------------------------------------------------------------//\n/**** get a reference to the \"global\" object ****/\nvar global = /*#__PURE__*/ Function('return this')();\n// see https://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript\n//------------------------------------------------------------------------------\n//--                             Object Functions                             --\n//------------------------------------------------------------------------------\n// allow methods from Object.prototype to be applied to \"vanilla\" objects\n/**** Object_hasOwnProperty ****/\nfunction Object_hasOwnProperty(Value, PropertyName) {\n    return ((Value == null) || // let this method crash like its original\n        ('hasOwnProperty' in Value) && (typeof Value.hasOwnProperty === 'function')\n        ? Value.hasOwnProperty(PropertyName)\n        : Object.prototype.hasOwnProperty.call(Value, PropertyName));\n}\n/**** Object_isPrototypeOf ****/\nfunction Object_isPrototypeOf(Value, Candidate) {\n    return ((Value == null) || // let this method crash like its original\n        ('isPrototypeOf' in Value) && (typeof Value.isPrototypeOf === 'function')\n        ? Value.isPrototypeOf(Candidate)\n        : Object.prototype.isPrototypeOf.call(Value, Candidate));\n}\n/**** Object_propertyIsEnumerable ****/\nfunction Object_propertyIsEnumerable(Value, PropertyName) {\n    return ((Value == null) || // let this method crash like its original\n        ('propertyIsEnumerable' in Value) && (typeof Value.propertyIsEnumerable === 'function')\n        ? Value.propertyIsEnumerable(PropertyName)\n        : Object.prototype.propertyIsEnumerable.call(Value, PropertyName));\n}\n/**** Object_toString ****/\nfunction Object_toString(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('toString' in Value) && (typeof Value.toString === 'function')\n        ? Value.toString()\n        : Object.prototype.toString.call(Value));\n}\n/**** Object_toLocaleString ****/\nfunction Object_toLocaleString(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('toLocaleString' in Value) && (typeof Value.toLocaleString === 'function')\n        ? Value.toLocaleString()\n        : Object.prototype.toString.call(Value)); // a missing \"toLocaleString\" method will crash Object.prototype.toLocaleString\n}\n/**** Object_valueOf ****/\nfunction Object_valueOf(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('valueOf' in Value) && (typeof Value.valueOf === 'function')\n        ? Value.valueOf()\n        : Object.prototype.valueOf.call(Value));\n}\n/**** ObjectMergedWith ****/\nfunction ObjectMergedWith(TargetObject) {\n    var otherObjectList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherObjectList[_i - 1] = arguments[_i];\n    }\n    for (var i = 0, l = otherObjectList.length; i < l; i++) {\n        var otherObject = otherObjectList[i];\n        if (otherObject == null) {\n            continue;\n        }\n        if (typeof otherObject === 'object') {\n            for (var Key in otherObject) {\n                var Descriptor = Object.getOwnPropertyDescriptor(otherObject, Key);\n                if (Descriptor != null) {\n                    Object.defineProperty(TargetObject, Key, Descriptor);\n                }\n            }\n        }\n        else {\n            throwError('InvalidArgument: argument #' + (i + 1) + ' is not an object');\n        }\n    }\n    return TargetObject;\n}\n/**** throwError - simplifies construction of named errors ****/\nfunction throwError(Message) {\n    var Match = /^([$a-zA-Z][$a-zA-Z0-9]*):\\s*(\\S.+)\\s*$/.exec(Message);\n    if (Match == null) {\n        throw new Error(Message);\n    }\n    else {\n        var namedError = new Error(Match[2]);\n        namedError.name = Match[1];\n        throw namedError;\n    }\n}\n//------------------------------------------------------------------------------\n//--                      Value Classification Functions                      --\n//------------------------------------------------------------------------------\n/**** ValueExists ****/\nfunction ValueExists(Value) {\n    return (Value != null);\n}\n/**** ValueIsMissing ****/\nfunction ValueIsMissing(Value) {\n    return (Value == null);\n}\n/**** ValueIsBoolean ****/\nfunction ValueIsBoolean(Value) {\n    return (typeof Value === 'boolean') || (Value instanceof Boolean);\n}\n/**** ValueIsNumber ****/\nfunction ValueIsNumber(Value) {\n    return (typeof Value === 'number') || (Value instanceof Number);\n}\n/**** ValueIsFiniteNumber (pure \"isFinite\" breaks on objects) ****/\nfunction ValueIsFiniteNumber(Value) {\n    return ((typeof Value === 'number') || (Value instanceof Number)) && isFinite(Value.valueOf());\n}\n/**** ValueIsNaN (numeric, but NaN - this differs from pure \"isNaN\") ****/\nfunction ValueIsNaN(Value) {\n    return ((typeof Value === 'number') || (Value instanceof Number)) && isNaN(Value.valueOf());\n}\n/**** ValueIsNumberInRange ****/\nfunction ValueIsNumberInRange(Value, minValue, maxValue, withMin, withMax) {\n    if (withMin === void 0) { withMin = true; }\n    if (withMax === void 0) { withMax = true; }\n    if (!ValueIsNumber(Value) || isNaN(Value)) {\n        return false;\n    }\n    if (ValueIsFiniteNumber(minValue)) { // more robust than \"isFinite\" alone\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value < minValue) || (!withMin && (Value === minValue)) ||\n                (Value > maxValue) || (!withMax && (Value === maxValue))) {\n                return false;\n            }\n        }\n        else {\n            if ((Value < minValue) || (!withMin && (Value === minValue))) {\n                return false;\n            }\n        }\n    }\n    else {\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value > maxValue) || (!withMax && (Value === maxValue))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**** ValueIsInteger ****/\nfunction ValueIsInteger(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value);\n}\n/**** ValueIsIntegerInRange ****/\nfunction ValueIsIntegerInRange(Value, minValue, maxValue) {\n    if (!ValueIsInteger(Value) || isNaN(Value)) {\n        return false;\n    }\n    if (ValueIsFiniteNumber(minValue)) { // more robust than \"isFinite\" alone\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value < minValue) || (Value > maxValue)) {\n                return false;\n            }\n        }\n        else {\n            if (Value < minValue) {\n                return false;\n            }\n        }\n    }\n    else {\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if (Value > maxValue) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**** ValueIsOrdinal ****/\nfunction ValueIsOrdinal(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 0);\n}\n/**** ValueIsCardinal ****/\nfunction ValueIsCardinal(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 1);\n}\n/**** ValueIsString ****/\nfunction ValueIsString(Value) {\n    return (typeof Value === 'string') || (Value instanceof String);\n}\n/**** ValueIs[Non]EmptyString ****/\nvar emptyStringPattern = /^\\s*$/;\nfunction ValueIsEmptyString(Value) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && emptyStringPattern.test(Value.valueOf());\n}\nfunction ValueIsNonEmptyString(Value) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && !emptyStringPattern.test(Value.valueOf());\n}\n/**** ValueIsStringMatching ****/\nfunction ValueIsStringMatching(Value, Pattern) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && Pattern.test(Value.valueOf());\n}\n/**** ValueIsText ****/\nvar noCtrlCharsButCRLFPattern = /^[^\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsText(Value) {\n    return ValueIsStringMatching(Value, noCtrlCharsButCRLFPattern);\n}\n/**** ValueIsTextline ****/\nvar noCtrlCharsPattern = /^[^\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsTextline(Value) {\n    return ValueIsStringMatching(Value, noCtrlCharsPattern);\n}\n/**** ValueIsFunction ****/\nfunction ValueIsFunction(Value) {\n    return (typeof Value === 'function');\n}\n/**** ValueIsAnonymousFunction ****/\nfunction ValueIsAnonymousFunction(Value) {\n    return ((typeof Value === 'function') &&\n        ((Value.name == null) || (Value.name === '')));\n}\n/**** ValueIsNamedFunction ****/\nfunction ValueIsNamedFunction(Value) {\n    return ((typeof Value === 'function') &&\n        (Value.name != null) && (Value.name !== ''));\n}\n/**** ValueIsNativeFunction ****/\nfunction ValueIsNativeFunction(Value) {\n    return ((typeof Value === 'function') &&\n        /^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString()));\n}\n/**** ValueIsScriptedFunction ****/\nfunction ValueIsScriptedFunction(Value) {\n    return ((typeof Value === 'function') &&\n        !/^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString()));\n}\n/**** ValueIsObject ****/\nfunction ValueIsObject(Value) {\n    return (Value != null) && (typeof Value === 'object');\n}\n/**** ValueIsPlainObject ****/\nfunction ValueIsPlainObject(Value) {\n    return ((Value != null) && (typeof Value === 'object') &&\n        (Object.getPrototypeOf(Value) === Object.prototype));\n}\n/**** ValueIsVanillaObject ****/\nfunction ValueIsVanillaObject(Value) {\n    return ((Value != null) && (typeof Value === 'object') &&\n        !(Value instanceof Object));\n}\n/**** ValueIsArray ****/\nvar ValueIsArray = Array.isArray;\n/**** ValueIsList (\"dense\" array) ****/\nfunction ValueIsList(Value, minLength, maxLength) {\n    if (ValueIsArray(Value)) {\n        for (var i = 0, l = Value.length; i < l; i++) {\n            if (Value[i] === undefined) {\n                return false;\n            }\n        }\n        if (minLength != null) {\n            if (Value.length < minLength) {\n                return false;\n            }\n        }\n        if (maxLength != null) {\n            if (Value.length > maxLength) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n/**** ValueIsListSatisfying ****/\nfunction ValueIsListSatisfying(Value, Validator, minLength, maxLength) {\n    if (ValueIsArray(Value)) {\n        try {\n            for (var i = 0, l = Value.length; i < l; i++) {\n                if (Validator(Value[i]) == false) {\n                    return false;\n                }\n            }\n            if (minLength != null) {\n                if (Value.length < minLength) {\n                    return false;\n                }\n            }\n            if (maxLength != null) {\n                if (Value.length > maxLength) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        catch (Signal) { /* nop */ }\n    }\n    return false;\n}\n/**** ValueIsInstanceOf ****/\nfunction ValueIsInstanceOf(Value, Constructor) {\n    return (Value instanceof Constructor);\n}\n/**** ValueInheritsFrom ****/\nfunction ValueInheritsFrom(Value, Prototype) {\n    return Object_isPrototypeOf(Prototype, Value);\n}\n/**** ValueIsDate ****/\nfunction ValueIsDate(Value) {\n    return (Value instanceof Date);\n}\n/**** ValueIsError ****/\nfunction ValueIsError(Value) {\n    return (Value instanceof Error);\n}\n/**** ValueIsPromise ****/\nfunction ValueIsPromise(Value) {\n    return (Value != null) && (typeof Value.then === 'function');\n}\n// see https://stackoverflow.com/questions/27746304/how-do-i-tell-if-an-object-is-a-promise\n/**** ValueIsRegExp ****/\nfunction ValueIsRegExp(Value) {\n    return (Value instanceof RegExp);\n}\n/**** ValueIsOneOf ****/\nfunction ValueIsOneOf(Value, ValueList) {\n    return (ValueList.indexOf(Value) >= 0);\n} // no automatic unboxing of boxed values and vice-versa!\n/**** ValueIsColor ****/\nfunction ValueIsColor(Value) {\n    return ValueIsString(Value) && (ColorSet.hasOwnProperty(Value) ||\n        /^#[a-fA-F0-9]{6}$/.test(Value) ||\n        /^#[a-fA-F0-9]{8}$/.test(Value) ||\n        /^rgb\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+\\)$/.test(Value) || // not perfect\n        /^rgba\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+,([01]|[0]?[.][0-9]+)\\)$/.test(Value) // dto.\n    );\n}\n/**** ValueIsEMailAddress ****/\nvar EMailAddressPattern = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n// see https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression\nfunction ValueIsEMailAddress(Value) {\n    return ValueIsStringMatching(Value, EMailAddressPattern);\n}\n/**** ValueIsURL ****/\nvar noCtrlCharsOrWhitespacePattern = /^[^\\s\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsURL(Value) {\n    if (!ValueIsStringMatching(Value, noCtrlCharsOrWhitespacePattern) ||\n        (Value === '')) {\n        return false;\n    }\n    try {\n        new URL(Value, 'file://');\n        return true;\n    }\n    catch (Signal) {\n        return false;\n    }\n}\n//------------------------------------------------------------------------------\n//--                      Argument Validation Functions                       --\n//------------------------------------------------------------------------------\nvar rejectNil = false;\nvar acceptNil = true;\n/**** validatedArgument ****/\nfunction validatedArgument(Description, Argument, ValueIsValid, NilIsAcceptable, Expectation) {\n    if (Argument == null) {\n        if (NilIsAcceptable) {\n            return Argument;\n        }\n        else {\n            throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n        }\n    }\n    else {\n        if (ValueIsValid(Argument)) {\n            switch (true) {\n                case Argument instanceof Boolean:\n                case Argument instanceof Number:\n                case Argument instanceof String:\n                    return Argument.valueOf(); // unboxes any primitives\n                default:\n                    return Argument;\n            }\n        }\n        else {\n            throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is no valid \").concat(escaped(Expectation)));\n        }\n    }\n}\n/**** ValidatorForClassifier ****/\nfunction ValidatorForClassifier(Classifier, NilIsAcceptable, Expectation) {\n    var Validator = function (Description, Argument) {\n        return validatedArgument(Description, Argument, Classifier, NilIsAcceptable, Expectation);\n    };\n    var ClassifierName = Classifier.name;\n    if ((ClassifierName != null) && /^ValueIs/.test(ClassifierName)) {\n        var ValidatorName = ClassifierName.replace(// derive name from validator\n        /^ValueIs/, NilIsAcceptable ? 'allow' : 'expect');\n        return FunctionWithName(Validator, ValidatorName);\n    }\n    else {\n        return Validator; // without any specific name\n    }\n}\n/**** FunctionWithName (works with older JS engines as well) ****/\nfunction FunctionWithName(originalFunction, desiredName) {\n    if (originalFunction == null) {\n        throwError('MissingArgument: no function given');\n    }\n    if (typeof originalFunction !== 'function') {\n        throwError('InvalidArgument: the given 1st Argument is not a JavaScript function');\n    }\n    if (desiredName == null) {\n        throwError('MissingArgument: no desired name given');\n    }\n    if ((typeof desiredName !== 'string') && !(desiredName instanceof String)) {\n        throwError('InvalidArgument: the given desired name is not a string');\n    }\n    if (originalFunction.name === desiredName) {\n        return originalFunction;\n    }\n    try {\n        Object.defineProperty(originalFunction, 'name', { value: desiredName });\n        if (originalFunction.name === desiredName) {\n            return originalFunction;\n        }\n    }\n    catch (signal) { /* ok - let's take the hard way */ }\n    var renamed = new Function('originalFunction', 'return function ' + desiredName + ' () {' +\n        'return originalFunction.apply(this,Array.prototype.slice.apply(arguments))' +\n        '}');\n    return renamed(originalFunction);\n} // also works with older JavaScript engines\n/**** expect[ed]Value ****/\nfunction expectValue(Description, Argument) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    else {\n        return Argument.valueOf();\n    }\n}\nvar expectedValue = expectValue;\n/**** allow/expect[ed]Boolean ****/\nvar allowBoolean = /*#__PURE__*/ ValidatorForClassifier(ValueIsBoolean, acceptNil, 'boolean value'), allowedBoolean = allowBoolean;\nvar expectBoolean = /*#__PURE__*/ ValidatorForClassifier(ValueIsBoolean, rejectNil, 'boolean value'), expectedBoolean = expectBoolean;\n/**** allow/expect[ed]Number ****/\nvar allowNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsNumber, acceptNil, 'numeric value'), allowedNumber = allowNumber;\nvar expectNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsNumber, rejectNil, 'numeric value'), expectedNumber = expectNumber;\n/**** allow/expect[ed]FiniteNumber ****/\nvar allowFiniteNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsFiniteNumber, acceptNil, 'finite numeric value'), allowedFiniteNumber = allowFiniteNumber;\nvar expectFiniteNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsFiniteNumber, rejectNil, 'finite numeric value'), expectedFiniteNumber = expectFiniteNumber;\n/**** allow/expect[ed]NaN ****/\nvar allowNaN = /*#__PURE__*/ ValidatorForClassifier(ValueIsNaN, acceptNil, 'NaN value'), allowedNaN = allowNaN;\nvar expectNaN = /*#__PURE__*/ ValidatorForClassifier(ValueIsNaN, rejectNil, 'NaN value'), expectedNaN = expectNaN;\n/**** allow[ed]NumberInRange ****/\nfunction allowNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax) {\n    return (Argument == null\n        ? Argument\n        : expectedNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax));\n}\nvar allowedNumberInRange = allowNumberInRange;\n/**** expect[ed]NumberInRange ****/\nfunction expectNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax) {\n    expectNumber(Description, Argument);\n    if (isNaN(Argument)) {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is not-a-number\"));\n    }\n    if (withMin == null) {\n        withMin = true;\n    }\n    if (withMax == null) {\n        withMax = true;\n    }\n    if ((minValue != null) && isFinite(minValue)) {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument < minValue) || (!withMin && (Argument === minValue)) ||\n                (Argument > maxValue) || (!withMax && (Argument === maxValue))) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" (\").concat(Argument, \") is outside \") +\n                    \"the allowed range (\".concat(minValue, \"...\").concat(maxValue, \")\"));\n            }\n        }\n        else {\n            if ((Argument < minValue) || (!withMin && (Argument === minValue))) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" is below the allowed \") +\n                    \"minimum (\".concat(Argument, \" \").concat(withMin ? '<' : '<=', \" \").concat(minValue, \")\"));\n            }\n        }\n    }\n    else {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument > maxValue) || (!withMax && (Argument === maxValue))) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" exceeds the allowed \") +\n                    \"maximum (\".concat(Argument, \" \").concat(withMax ? '>' : '>=', \" \").concat(maxValue, \")\"));\n            }\n        }\n    }\n    return Argument.valueOf();\n}\nvar expectedNumberInRange = expectNumberInRange;\n/**** allow/expect[ed]Integer ****/\nvar allowInteger = /*#__PURE__*/ ValidatorForClassifier(ValueIsInteger, acceptNil, 'integral numeric value'), allowedInteger = allowInteger;\nvar expectInteger = /*#__PURE__*/ ValidatorForClassifier(ValueIsInteger, rejectNil, 'integral numeric value'), expectedInteger = expectInteger;\n/**** allow[ed]IntegerInRange ****/\nfunction allowIntegerInRange(Description, Argument, minValue, maxValue) {\n    return (Argument == null\n        ? Argument\n        : expectedIntegerInRange(Description, Argument, minValue, maxValue));\n}\nvar allowedIntegerInRange = allowIntegerInRange;\n/**** expect[ed]IntegerInRange ****/\nfunction expectIntegerInRange(Description, Argument, minValue, maxValue) {\n    expectInteger(Description, Argument);\n    if (isNaN(Argument)) {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is not-a-number\"));\n    }\n    if ((minValue != null) && isFinite(minValue)) {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument < minValue) || (Argument > maxValue)) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" (\").concat(Argument, \") is outside \") +\n                    \"the allowed range (\".concat(minValue, \"...\").concat(maxValue, \")\"));\n            }\n        }\n        else {\n            if (Argument < minValue) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" is below the allowed \") +\n                    \"minimum (\".concat(Argument, \" < \").concat(minValue, \")\"));\n            }\n        }\n    }\n    else {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if (Argument > maxValue) {\n                throw new RangeError(\"the given \".concat(escaped(Description), \" exceeds the allowed \") +\n                    \"maximum (\".concat(Argument, \" > \").concat(maxValue, \")\"));\n            }\n        }\n    }\n    return Argument.valueOf();\n}\nvar expectedIntegerInRange = expectIntegerInRange;\n/**** allow/expect[ed]Ordinal ****/\nvar allowOrdinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsOrdinal, acceptNil, 'ordinal number'), allowedOrdinal = allowOrdinal;\nvar expectOrdinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsOrdinal, rejectNil, 'ordinal number'), expectedOrdinal = expectOrdinal;\n/**** allow/expect[ed]Cardinal ****/\nvar allowCardinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsCardinal, acceptNil, 'cardinal number'), allowedCardinal = allowCardinal;\nvar expectCardinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsCardinal, rejectNil, 'cardinal number'), expectedCardinal = expectCardinal;\n/**** allow/expect[ed]String ****/\nvar allowString = /*#__PURE__*/ ValidatorForClassifier(ValueIsString, acceptNil, 'literal string'), allowedString = allowString;\nvar expectString = /*#__PURE__*/ ValidatorForClassifier(ValueIsString, rejectNil, 'literal string'), expectedString = expectString;\n/**** allow/expect[ed]NonEmptyString ****/\nvar allowNonEmptyString = /*#__PURE__*/ ValidatorForClassifier(ValueIsNonEmptyString, acceptNil, 'non-empty literal string'), allowedNonEmptyString = allowNonEmptyString;\nvar expectNonEmptyString = /*#__PURE__*/ ValidatorForClassifier(ValueIsNonEmptyString, rejectNil, 'non-empty literal string'), expectedNonEmptyString = expectNonEmptyString;\n/**** allow[ed]StringMatching ****/\nfunction allowStringMatching(Description, Argument, Pattern) {\n    return (Argument == null\n        ? Argument\n        : expectedStringMatching(Description, Argument, Pattern));\n}\nvar allowedStringMatching = allowStringMatching;\n/**** expect[ed]StringMatching ****/\nfunction expectStringMatching(Description, Argument, Pattern) {\n    expectString(Description, Argument);\n    if (Pattern.test(Argument)) {\n        return Argument.valueOf();\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" does not match the specified pattern\"));\n    }\n}\nvar expectedStringMatching = expectStringMatching;\n/**** allow/expect[ed]Text ****/\nvar allowText = /*#__PURE__*/ ValidatorForClassifier(ValueIsText, acceptNil, 'literal text'), allowedText = allowText;\nvar expectText = /*#__PURE__*/ ValidatorForClassifier(ValueIsText, rejectNil, 'literal text'), expectedText = expectText;\n/**** allow/expect[ed]Textline ****/\nvar allowTextline = /*#__PURE__*/ ValidatorForClassifier(ValueIsTextline, acceptNil, 'single line of text'), allowedTextline = allowTextline;\nvar expectTextline = /*#__PURE__*/ ValidatorForClassifier(ValueIsTextline, rejectNil, 'single line of text'), expectedTextline = expectTextline;\n/**** allow/expect[ed]Function ****/\nvar allowFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsFunction, acceptNil, 'JavaScript function'), allowedFunction = allowFunction;\nvar expectFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsFunction, rejectNil, 'JavaScript function'), expectedFunction = expectFunction;\n/**** allow/expect[ed]AnonymousFunction ****/\nvar allowAnonymousFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsAnonymousFunction, acceptNil, 'anonymous JavaScript function'), allowedAnonymousFunction = allowAnonymousFunction;\nvar expectAnonymousFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsAnonymousFunction, rejectNil, 'anonymous JavaScript function'), expectedAnonymousFunction = expectAnonymousFunction;\n/**** allow/expect[ed]NamedFunction ****/\nvar allowNamedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNamedFunction, acceptNil, 'named JavaScript function'), allowedNamedFunction = allowNamedFunction;\nvar expectNamedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNamedFunction, rejectNil, 'named JavaScript function'), expectedNamedFunction = expectNamedFunction;\n/**** allow/expect[ed]NativeFunction ****/\nvar allowNativeFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNativeFunction, acceptNil, 'native JavaScript function'), allowedNativeFunction = allowNativeFunction;\nvar expectNativeFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNativeFunction, rejectNil, 'native JavaScript function'), expectedNativeFunction = expectNativeFunction;\n/**** allow/expect[ed]ScriptedFunction ****/\nvar allowScriptedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsScriptedFunction, acceptNil, 'scripted JavaScript function'), allowedScriptedFunction = allowScriptedFunction;\nvar expectScriptedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsScriptedFunction, rejectNil, 'scripted JavaScript function'), expectedScriptedFunction = expectScriptedFunction;\n/**** allow/expect[ed]Object ****/\nvar allowObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsObject, acceptNil, 'JavaScript object'), allowedObject = allowObject;\nvar expectObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsObject, rejectNil, 'JavaScript object'), expectedObject = expectObject;\n/**** allow/expect[ed]PlainObject ****/\nvar allowPlainObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsPlainObject, acceptNil, '\"plain\" JavaScript object'), allowedPlainObject = allowPlainObject;\nvar expectPlainObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsPlainObject, rejectNil, '\"plain\" JavaScript object'), expectedPlainObject = expectPlainObject;\n/**** allow/expect[ed]VanillaObject ****/\nvar allowVanillaObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsVanillaObject, acceptNil, '\"vanilla\" JavaScript object'), allowedVanillaObject = allowVanillaObject;\nvar expectVanillaObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsVanillaObject, rejectNil, '\"vanilla\" JavaScript object'), expectedVanillaObject = expectVanillaObject;\n/**** allow[ed]Array ****/\nfunction allowArray(Description, Argument) {\n    return (Argument == null\n        ? Argument\n        : expectedArray(Description, Argument));\n}\nvar allowedArray = allowArray;\n/**** expect[ed]Array ****/\nfunction expectArray(Description, Argument) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (ValueIsArray(Argument)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is no JavaScript array\"));\n    }\n}\nvar expectedArray = expectArray;\n/**** allow[ed]List ****/\nfunction allowList(Description, Argument, Expectation, minLength, maxLength) {\n    return (Argument == null\n        ? Argument\n        : expectedList(Description, Argument, Expectation, minLength, maxLength));\n}\nvar allowedList = allowList;\n/**** expect[ed]List ****/\nfunction expectList(Description, Argument, Expectation, minLength, maxLength) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (ValueIsList(Argument, minLength, maxLength)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is \") + (Expectation == null\n            ? 'either not a list or contains an invalid number of elements'\n            : 'no ' + escaped(Expectation)));\n    }\n}\nvar expectedList = expectList;\n/**** allow[ed]ListSatisfying ****/\nfunction allowListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength) {\n    return (Argument == null\n        ? Argument\n        : expectedListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength));\n}\nvar allowedListSatisfying = allowListSatisfying;\n/**** expect[ed]ListSatisfying ****/\nfunction expectListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (ValueIsListSatisfying(Argument, Validator, minLength, maxLength)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is \") + (Expectation == null\n            ? 'either not a list or contains invalid elements'\n            : 'no ' + escaped(Expectation)));\n    }\n}\nvar expectedListSatisfying = expectListSatisfying;\n/**** allow[ed]InstanceOf ****/\nfunction allowInstanceOf(Description, Argument, constructor, Expectation) {\n    return (Argument == null\n        ? Argument\n        : expectedInstanceOf(Description, Argument, constructor, Expectation));\n}\nvar allowedInstanceOf = allowInstanceOf;\n/**** expect[ed]InstanceOf ****/\nfunction expectInstanceOf(Description, Argument, constructor, Expectation) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (!(Argument instanceof constructor)) {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is no \").concat(escaped(Expectation)));\n    }\n    return Argument;\n}\nvar expectedInstanceOf = expectInstanceOf;\n/**** allow[ed]ValueInheritingFrom ****/\nfunction allowValueInheritingFrom(Description, Argument, prototype, Expectation) {\n    return (Argument == null\n        ? Argument\n        : expectedValueInheritingFrom(Description, Argument, prototype, Expectation));\n}\nvar allowedValueInheritingFrom = allowValueInheritingFrom;\n/**** expect[ed]ValueInheritingFrom ****/\nfunction expectValueInheritingFrom(Description, Argument, prototype, Expectation) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (prototype.isPrototypeOf(Argument)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is no \").concat(escaped(Expectation)));\n    }\n}\nvar expectedValueInheritingFrom = expectValueInheritingFrom;\n/**** allow/expect[ed]Date ****/\nvar allowDate = /*#__PURE__*/ ValidatorForClassifier(ValueIsDate, acceptNil, 'JavaScript Date object'), allowedDate = allowDate;\nvar expectDate = /*#__PURE__*/ ValidatorForClassifier(ValueIsDate, rejectNil, 'JavaScript Date object'), expectedDate = expectDate;\n/**** allow/expect[ed]Error ****/\nvar allowError = /*#__PURE__*/ ValidatorForClassifier(ValueIsError, acceptNil, 'JavaScript Error object'), allowedError = allowError;\nvar expectError = /*#__PURE__*/ ValidatorForClassifier(ValueIsError, rejectNil, 'JavaScript Error object'), expectedError = expectError;\n/**** allow/expect[ed]Promise ****/\nvar allowPromise = /*#__PURE__*/ ValidatorForClassifier(ValueIsPromise, acceptNil, 'JavaScript Promise (or \"Thenable\") object'), allowedPromise = allowPromise;\nvar expectPromise = /*#__PURE__*/ ValidatorForClassifier(ValueIsPromise, rejectNil, 'JavaScript Promise (or \"Thenable\") object'), expectedPromise = expectPromise;\n/**** allow/expect[ed]RegExp ****/\nvar allowRegExp = /*#__PURE__*/ ValidatorForClassifier(ValueIsRegExp, acceptNil, 'JavaScript RegExp object'), allowedRegExp = allowRegExp;\nvar expectRegExp = /*#__PURE__*/ ValidatorForClassifier(ValueIsRegExp, rejectNil, 'JavaScript RegExp object'), expectedRegExp = expectRegExp;\n/**** allow[ed]OneOf ****/\nfunction allowOneOf(Description, Argument, ValueList) {\n    return (Argument == null\n        ? Argument\n        : expectedOneOf(Description, Argument, ValueList));\n}\nvar allowedOneOf = allowOneOf;\n/**** expect[ed]OneOf ****/\nfunction expectOneOf(Description, Argument, ValueList) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \".concat(escaped(Description), \" given\"));\n    }\n    if (ValueIsOneOf(Argument, ValueList)) {\n        return ( // unboxes any primitives\n        (Argument == null) || (typeof Argument.valueOf !== 'function')\n            ? Argument\n            : Argument.valueOf());\n    }\n    else {\n        throwError(\"InvalidArgument: the given \".concat(escaped(Description), \" is not among the supported values\"));\n    }\n}\nvar expectedOneOf = expectOneOf;\n/**** allow/expect[ed]Color ****/\nvar allowColor = /*#__PURE__*/ ValidatorForClassifier(ValueIsColor, acceptNil, 'CSS color specification'), allowedColor = allowColor;\nvar expectColor = /*#__PURE__*/ ValidatorForClassifier(ValueIsColor, rejectNil, 'CSS color specification'), expectedColor = expectColor;\n/**** allow/expect[ed]EMailAddress ****/\nvar allowEMailAddress = /*#__PURE__*/ ValidatorForClassifier(ValueIsEMailAddress, acceptNil, 'EMail address'), allowedEMailAddress = allowEMailAddress;\nvar expectEMailAddress = /*#__PURE__*/ ValidatorForClassifier(ValueIsEMailAddress, rejectNil, 'EMail address'), expectedEMailAddress = expectEMailAddress;\n/**** allow/expect[ed]URL ****/\nvar allowURL = /*#__PURE__*/ ValidatorForClassifier(ValueIsURL, acceptNil, 'URL'), allowedURL = allowURL;\nvar expectURL = /*#__PURE__*/ ValidatorForClassifier(ValueIsURL, rejectNil, 'URL'), expectedURL = expectURL;\n/**** escaped - escapes all control characters in a given string ****/\nfunction escaped(Text) {\n    var EscapeSequencePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?/g;\n    var CtrlCharCodePattern = /[\\x00-\\x1f\\x7f-\\x9f]/g;\n    return Text\n        .replace(EscapeSequencePattern, function (Match) {\n        return (Match === '\\\\' ? '\\\\\\\\' : Match);\n    })\n        .replace(CtrlCharCodePattern, function (Match) {\n        switch (Match) {\n            case '\\0': return '\\\\0';\n            case '\\b': return '\\\\b';\n            case '\\f': return '\\\\f';\n            case '\\n': return '\\\\n';\n            case '\\r': return '\\\\r';\n            case '\\t': return '\\\\t';\n            case '\\v': return '\\\\v';\n            default: {\n                var HexCode = Match.charCodeAt(0).toString(16);\n                return '\\\\x' + '00'.slice(HexCode.length) + HexCode;\n            }\n        }\n    });\n}\n/**** unescaped - evaluates all escape sequences in a given string ****/\nfunction unescaped(Text) {\n    var EscapeSequencePattern = /\\\\[0bfnrtv'\"\\\\\\/]|\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}/g;\n    return Text\n        .replace(EscapeSequencePattern, function (Match) {\n        switch (Match) {\n            case '\\\\0': return '\\0';\n            case '\\\\b': return '\\b';\n            case '\\\\f': return '\\f';\n            case '\\\\n': return '\\n';\n            case '\\\\r': return '\\r';\n            case '\\\\t': return '\\t';\n            case '\\\\v': return '\\v';\n            case '\\\\\\'': return \"'\";\n            case '\\\\\"': return '\"';\n            case '\\\\\\\\': return \"\\\\\";\n            default: {\n                var CharCode = parseInt(Match.slice(2), 16);\n                return String.fromCharCode(CharCode);\n            }\n        }\n    });\n}\n/**** quotable - makes a given string ready to be put in single/double quotes ****/\nfunction quotable(Text, Quote) {\n    if (Quote === void 0) { Quote = '\"'; }\n    var EscSeqOrSglQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|'/g;\n    var EscSeqOrDblQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|\"/g;\n    var CtrlCharCodePattern = /[\\x00-\\x1f\\x7f-\\x9f]/g;\n    return Text\n        .replace(Quote === \"'\" ? EscSeqOrSglQuotePattern : EscSeqOrDblQuotePattern, function (Match) {\n        switch (Match) {\n            case \"'\": return \"\\\\'\";\n            case '\"': return '\\\\\"';\n            case '\\\\': return '\\\\\\\\';\n            default: return Match;\n        }\n    })\n        .replace(CtrlCharCodePattern, function (Match) {\n        switch (Match) {\n            case '\\0': return '\\\\0';\n            case '\\b': return '\\\\b';\n            case '\\f': return '\\\\f';\n            case '\\n': return '\\\\n';\n            case '\\r': return '\\\\r';\n            case '\\t': return '\\\\t';\n            case '\\v': return '\\\\v';\n            default: {\n                var HexCode = Match.charCodeAt(0).toString(16);\n                return '\\\\x' + '00'.slice(HexCode.length) + HexCode;\n            }\n        }\n    });\n}\n/**** quoted ****/\nfunction quoted(Text, Quote) {\n    if (Quote === void 0) { Quote = '\"'; }\n    return Quote + quotable(Text, Quote) + Quote;\n}\n/**** HTMLsafe ****/\nfunction HTMLsafe(Argument, EOLReplacement) {\n    EOLReplacement = (EOLReplacement || '').trim() || '<br/>';\n    return Argument.replace(/[&<>\"'\\u0000-\\u001F\\u007F-\\u009F\\\\]/g, function (Match) {\n        switch (Match) {\n            case '&': return '&amp;';\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '\"': return '&quot;';\n            case \"'\": return '&apos;';\n            case '\\b': return '&#92;b';\n            case '\\f': return '&#92;f';\n            case '\\n': return EOLReplacement;\n            case '\\r': return '&#92;r';\n            case '\\t': return '&#92;t';\n            case '\\v': return '&#92;v';\n            case '\\\\': return '&#92;';\n            default:\n                var Result = Match.charCodeAt(0).toString(16);\n                return '&#x0000'.substring(3, 7 - Result.length) + Result + ';';\n        }\n    });\n}\n/**** MarkDownSafe ****/\nfunction MarkDownSafe(Argument, EOLReplacement) {\n    return HTMLsafe(Argument, EOLReplacement).replace(/:/g, '&#58;');\n}\n/**** ValuesDiffer ****/\nfunction ValuesDiffer(thisValue, otherValue, Mode) {\n    if (thisValue === otherValue) {\n        return false;\n    }\n    var thisType = typeof thisValue;\n    if (thisType !== typeof otherValue) {\n        return true;\n    }\n    /**** ArraysDiffer ****/\n    function ArraysDiffer(thisArray, otherArray, Mode) {\n        if (!Array.isArray(otherArray)) {\n            return true;\n        }\n        if (thisArray.length !== otherArray.length) {\n            return true;\n        }\n        for (var i = 0, l = thisArray.length; i < l; i++) {\n            if (ValuesDiffer(thisArray[i], otherArray[i], Mode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**** ObjectsDiffer ****/\n    function ObjectsDiffer(thisObject, otherObject, Mode) {\n        if (Object.getPrototypeOf(thisObject) !== Object.getPrototypeOf(otherObject)) {\n            return true;\n        }\n        for (var key in thisObject) {\n            if (!(key in otherObject)) {\n                return true;\n            }\n        }\n        for (var key in otherObject) {\n            if (!(key in thisObject)) {\n                return true;\n            }\n            if (ValuesDiffer(thisObject[key], otherObject[key], Mode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    switch (thisType) {\n        case 'undefined':\n        case 'boolean':\n        case 'string':\n        case 'function': return true; // most primitives are compared using \"===\"\n        case 'number': return ((isNaN(thisValue) !== isNaN(otherValue)) ||\n            (Math.abs(thisValue - otherValue) > Number.EPSILON));\n        case 'object':\n            if (thisValue == null) {\n                return true;\n            } // since \"other_value\" != null!\n            if (otherValue == null) {\n                return true;\n            } // since \"this_value\" != null!\n            if ((Mode === 'by-value') && ((thisValue instanceof Boolean) ||\n                (thisValue instanceof Number) ||\n                (thisValue instanceof String))) {\n                return (thisValue.valueOf() !== otherValue.valueOf());\n            }\n            if (Array.isArray(thisValue)) {\n                return ArraysDiffer(thisValue, otherValue, Mode);\n            }\n            return (Mode === 'by-reference'\n                ? true // because (thisValue !== otherValue)\n                : ObjectsDiffer(thisValue, otherValue, Mode));\n        default: return true; // unsupported property type\n    }\n    return true;\n}\n/**** ValuesAreEqual ****/\nfunction ValuesAreEqual(thisValue, otherValue, Mode) {\n    return !ValuesDiffer(thisValue, otherValue, Mode);\n}\n/**** ObjectIsEmpty ****/\nfunction ObjectIsEmpty(Candidate) {\n    expectObject('candidate', Candidate);\n    for (var Key in Candidate) {\n        if (Object_hasOwnProperty(Candidate, Key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**** ObjectIsNotEmpty ****/\nfunction ObjectIsNotEmpty(Candidate) {\n    return !ObjectIsEmpty(Candidate);\n}\n/**** StringIsEmpty ****/\nfunction StringIsEmpty(Candidate) {\n    return /^\\s*$/.test(Candidate);\n}\n/**** StringIsNotEmpty ****/\nfunction StringIsNotEmpty(Candidate) {\n    return !StringIsEmpty(Candidate);\n}\n/**** constrained ****/\nfunction constrained(Value, Minimum, Maximum) {\n    if (Minimum === void 0) { Minimum = -Infinity; }\n    if (Maximum === void 0) { Maximum = Infinity; }\n    return Math.max(Minimum, Math.min(Value, Maximum));\n}\n//------------------------------------------------------------------------------\n//--                             Color Utilities                              --\n//------------------------------------------------------------------------------\n// built-in color names (see http://www.w3.org/TR/SVG/types.html#ColorKeywords) ----\nvar ColorSet = {\n    transparent: 'rgba(0,0,0,0,0.0)',\n    aliceblue: 'rgba(240,248,255,1.0)', lightpink: 'rgba(255,182,193,1.0)',\n    antiquewhite: 'rgba(250,235,215,1.0)', lightsalmon: 'rgba(255,160,122,1.0)',\n    aqua: 'rgba(0,255,255,1.0)', lightseagreen: 'rgba(32,178,170,1.0)',\n    aquamarine: 'rgba(127,255,212,1.0)', lightskyblue: 'rgba(135,206,250,1.0)',\n    azure: 'rgba(240,255,255,1.0)', lightslategray: 'rgba(119,136,153,1.0)',\n    beige: 'rgba(245,245,220,1.0)', lightslategrey: 'rgba(119,136,153,1.0)',\n    bisque: 'rgba(255,228,196,1.0)', lightsteelblue: 'rgba(176,196,222,1.0)',\n    black: 'rgba(0,0,0,1.0)', lightyellow: 'rgba(255,255,224,1.0)',\n    blanchedalmond: 'rgba(255,235,205,1.0)', lime: 'rgba(0,255,0,1.0)',\n    blue: 'rgba(0,0,255,1.0)', limegreen: 'rgba(50,205,50,1.0)',\n    blueviolet: 'rgba(138,43,226,1.0)', linen: 'rgba(250,240,230,1.0)',\n    brown: 'rgba(165,42,42,1.0)', magenta: 'rgba(255,0,255,1.0)',\n    burlywood: 'rgba(222,184,135,1.0)', maroon: 'rgba(128,0,0,1.0)',\n    cadetblue: 'rgba(95,158,160,1.0)', mediumaquamarine: 'rgba(102,205,170,1.0)',\n    chartreuse: 'rgba(127,255,0,1.0)', mediumblue: 'rgba(0,0,205,1.0)',\n    chocolate: 'rgba(210,105,30,1.0)', mediumorchid: 'rgba(186,85,211,1.0)',\n    coral: 'rgba(255,127,80,1.0)', mediumpurple: 'rgba(147,112,219,1.0)',\n    cornflowerblue: 'rgba(100,149,237,1.0)', mediumseagreen: 'rgba(60,179,113,1.0)',\n    cornsilk: 'rgba(255,248,220,1.0)', mediumslateblue: 'rgba(123,104,238,1.0)',\n    crimson: 'rgba(220,20,60,1.0)', mediumspringgreen: 'rgba(0,250,154,1.0)',\n    cyan: 'rgba(0,255,255,1.0)', mediumturquoise: 'rgba(72,209,204,1.0)',\n    darkblue: 'rgba(0,0,139,1.0)', mediumvioletred: 'rgba(199,21,133,1.0)',\n    darkcyan: 'rgba(0,139,139,1.0)', midnightblue: 'rgba(25,25,112,1.0)',\n    darkgoldenrod: 'rgba(184,134,11,1.0)', mintcream: 'rgba(245,255,250,1.0)',\n    darkgray: 'rgba(169,169,169,1.0)', mistyrose: 'rgba(255,228,225,1.0)',\n    darkgreen: 'rgba(0,100,0,1.0)', moccasin: 'rgba(255,228,181,1.0)',\n    darkgrey: 'rgba(169,169,169,1.0)', navajowhite: 'rgba(255,222,173,1.0)',\n    darkkhaki: 'rgba(189,183,107,1.0)', navy: 'rgba(0,0,128,1.0)',\n    darkmagenta: 'rgba(139,0,139,1.0)', oldlace: 'rgba(253,245,230,1.0)',\n    darkolivegreen: 'rgba(85,107,47,1.0)', olive: 'rgba(128,128,0,1.0)',\n    darkorange: 'rgba(255,140,0,1.0)', olivedrab: 'rgba(107,142,35,1.0)',\n    darkorchid: 'rgba(153,50,204,1.0)', orange: 'rgba(255,165,0,1.0)',\n    darkred: 'rgba(139,0,0,1.0)', orangered: 'rgba(255,69,0,1.0)',\n    darksalmon: 'rgba(233,150,122,1.0)', orchid: 'rgba(218,112,214,1.0)',\n    darkseagreen: 'rgba(143,188,143,1.0)', palegoldenrod: 'rgba(238,232,170,1.0)',\n    darkslateblue: 'rgba(72,61,139,1.0)', palegreen: 'rgba(152,251,152,1.0)',\n    darkslategray: 'rgba(47,79,79,1.0)', paleturquoise: 'rgba(175,238,238,1.0)',\n    darkslategrey: 'rgba(47,79,79,1.0)', palevioletred: 'rgba(219,112,147,1.0)',\n    darkturquoise: 'rgba(0,206,209,1.0)', papayawhip: 'rgba(255,239,213,1.0)',\n    darkviolet: 'rgba(148,0,211,1.0)', peachpuff: 'rgba(255,218,185,1.0)',\n    deeppink: 'rgba(255,20,147,1.0)', peru: 'rgba(205,133,63,1.0)',\n    deepskyblue: 'rgba(0,191,255,1.0)', pink: 'rgba(255,192,203,1.0)',\n    dimgray: 'rgba(105,105,105,1.0)', plum: 'rgba(221,160,221,1.0)',\n    dimgrey: 'rgba(105,105,105,1.0)', powderblue: 'rgba(176,224,230,1.0)',\n    dodgerblue: 'rgba(30,144,255,1.0)', purple: 'rgba(128,0,128,1.0)',\n    firebrick: 'rgba(178,34,34,1.0)', red: 'rgba(255,0,0,1.0)',\n    floralwhite: 'rgba(255,250,240,1.0)', rosybrown: 'rgba(188,143,143,1.0)',\n    forestgreen: 'rgba(34,139,34,1.0)', royalblue: 'rgba(65,105,225,1.0)',\n    fuchsia: 'rgba(255,0,255,1.0)', saddlebrown: 'rgba(139,69,19,1.0)',\n    gainsboro: 'rgba(220,220,220,1.0)', salmon: 'rgba(250,128,114,1.0)',\n    ghostwhite: 'rgba(248,248,255,1.0)', sandybrown: 'rgba(244,164,96,1.0)',\n    gold: 'rgba(255,215,0,1.0)', seagreen: 'rgba(46,139,87,1.0)',\n    goldenrod: 'rgba(218,165,32,1.0)', seashell: 'rgba(255,245,238,1.0)',\n    gray: 'rgba(128,128,128,1.0)', sienna: 'rgba(160,82,45,1.0)',\n    green: 'rgba(0,128,0,1.0)', silver: 'rgba(192,192,192,1.0)',\n    greenyellow: 'rgba(173,255,47,1.0)', skyblue: 'rgba(135,206,235,1.0)',\n    grey: 'rgba(128,128,128,1.0)', slateblue: 'rgba(106,90,205,1.0)',\n    honeydew: 'rgba(240,255,240,1.0)', slategray: 'rgba(112,128,144,1.0)',\n    hotpink: 'rgba(255,105,180,1.0)', slategrey: 'rgba(112,128,144,1.0)',\n    indianred: 'rgba(205,92,92,1.0)', snow: 'rgba(255,250,250,1.0)',\n    indigo: 'rgba(75,0,130,1.0)', springgreen: 'rgba(0,255,127,1.0)',\n    ivory: 'rgba(255,255,240,1.0)', steelblue: 'rgba(70,130,180,1.0)',\n    khaki: 'rgba(240,230,140,1.0)', tan: 'rgba(210,180,140,1.0)',\n    lavender: 'rgba(230,230,250,1.0)', teal: 'rgba(0,128,128,1.0)',\n    lavenderblush: 'rgba(255,240,245,1.0)', thistle: 'rgba(216,191,216,1.0)',\n    lawngreen: 'rgba(124,252,0,1.0)', tomato: 'rgba(255,99,71,1.0)',\n    lemonchiffon: 'rgba(255,250,205,1.0)', turquoise: 'rgba(64,224,208,1.0)',\n    lightblue: 'rgba(173,216,230,1.0)', violet: 'rgba(238,130,238,1.0)',\n    lightcoral: 'rgba(240,128,128,1.0)', wheat: 'rgba(245,222,179,1.0)',\n    lightcyan: 'rgba(224,255,255,1.0)', white: 'rgba(255,255,255,1.0)',\n    lightgoldenrodyellow: 'rgba(250,250,210,1.0)', whitesmoke: 'rgba(245,245,245,1.0)',\n    lightgray: 'rgba(211,211,211,1.0)', yellow: 'rgba(255,255,0,1.0)',\n    lightgreen: 'rgba(144,238,144,1.0)', yellowgreen: 'rgba(154,205,50,1.0)',\n    lightgrey: 'rgba(211,211,211,1.0)',\n};\n/**** HexColor - converts a given color to #rrggbbaa ****/\nfunction HexColor(Color) {\n    var lowerColor = Color.toLowerCase();\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n        // @ts-ignore TS dislikes indexing with literal keys\n        Color = ColorSet[lowerColor];\n    } // do not return here as color is now in RGBA format\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n        return Color + 'FF';\n    }\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n        return Color;\n    }\n    var HexDigit = '0123456789ABCDEF';\n    function dec2hex(Value) {\n        if (Value > 255) {\n            Value = 255;\n        }\n        return HexDigit[Math.trunc(Value / 16)] + HexDigit[Value % 16];\n    }\n    var RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i; // not perfect\n    var Match = RGBPattern.exec(Color);\n    if (Match != null) {\n        return ('#' +\n            dec2hex(parseInt(Match[1], 10)) +\n            dec2hex(parseInt(Match[2], 10)) +\n            dec2hex(parseInt(Match[3], 10)) + 'FF');\n    }\n    var RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([01]?[.][0-9]+|[01])\\)$/i; // not perfect\n    Match = RGBAPattern.exec(Color);\n    if (Match != null) {\n        return ('#' +\n            dec2hex(parseInt(Match[1], 10)) +\n            dec2hex(parseInt(Match[2], 10)) +\n            dec2hex(parseInt(Match[3], 10)) +\n            dec2hex(parseFloat(Match[4]) * 255));\n    }\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification');\n}\n/**** RGBAColor - converts a given color to RGBA(r,g,b,a) ****/\nfunction RGBAColor(Color) {\n    var lowerColor = Color.toLowerCase();\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n        // @ts-ignore TS dislikes indexing with literal keys\n        return ColorSet[lowerColor]; // color is already in RGBA format\n    }\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n        return ('rgba(' +\n            parseInt(Color.slice(1, 3), 16) + ',' +\n            parseInt(Color.slice(3, 5), 16) + ',' +\n            parseInt(Color.slice(5, 7), 16) + ', 1' +\n            ')');\n    }\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n        return ('rgba(' +\n            parseInt(Color.slice(1, 3), 16) + ',' +\n            parseInt(Color.slice(3, 5), 16) + ',' +\n            parseInt(Color.slice(5, 7), 16) + ',' +\n            (parseInt(Color.slice(7), 16) / 255) +\n            ')');\n    }\n    var RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i; //not perfect\n    var Match = RGBPattern.exec(Color);\n    if (Match != null) {\n        return Color.slice(0, Color.length - 1) + ',1)';\n    }\n    var RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([0]?[.][0-9]+|[01])\\)$/i; // not perfect\n    Match = RGBAPattern.exec(Color);\n    if (Match != null) {\n        return Color;\n    }\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification');\n}\n/**** shortHexColor - converts a given color into #RRGGBB ****/\nfunction shortHexColor(Color) {\n    return HexColor(Color).slice(0, 7);\n}\n\nexport { ColorSet, FunctionWithName, HTMLsafe, HexColor, MarkDownSafe, ObjectIsEmpty, ObjectIsNotEmpty, ObjectMergedWith, Object_hasOwnProperty, Object_isPrototypeOf, Object_propertyIsEnumerable, Object_toLocaleString, Object_toString, Object_valueOf, RGBAColor, StringIsEmpty, StringIsNotEmpty, ValidatorForClassifier, ValueExists, ValueInheritsFrom, ValueIsAnonymousFunction, ValueIsArray, ValueIsBoolean, ValueIsCardinal, ValueIsColor, ValueIsDate, ValueIsEMailAddress, ValueIsEmptyString, ValueIsError, ValueIsFiniteNumber, ValueIsFunction, ValueIsInstanceOf, ValueIsInteger, ValueIsIntegerInRange, ValueIsList, ValueIsListSatisfying, ValueIsMissing, ValueIsNaN, ValueIsNamedFunction, ValueIsNativeFunction, ValueIsNonEmptyString, ValueIsNumber, ValueIsNumberInRange, ValueIsObject, ValueIsOneOf, ValueIsOrdinal, ValueIsPlainObject, ValueIsPromise, ValueIsRegExp, ValueIsScriptedFunction, ValueIsString, ValueIsStringMatching, ValueIsText, ValueIsTextline, ValueIsURL, ValueIsVanillaObject, ValuesAreEqual, ValuesDiffer, acceptNil, allowAnonymousFunction, allowArray, allowBoolean, allowCardinal, allowColor, allowDate, allowEMailAddress, allowError, allowFiniteNumber, allowFunction, allowInstanceOf, allowInteger, allowIntegerInRange, allowList, allowListSatisfying, allowNaN, allowNamedFunction, allowNativeFunction, allowNonEmptyString, allowNumber, allowNumberInRange, allowObject, allowOneOf, allowOrdinal, allowPlainObject, allowPromise, allowRegExp, allowScriptedFunction, allowString, allowStringMatching, allowText, allowTextline, allowURL, allowValueInheritingFrom, allowVanillaObject, allowedAnonymousFunction, allowedArray, allowedBoolean, allowedCardinal, allowedColor, allowedDate, allowedEMailAddress, allowedError, allowedFiniteNumber, allowedFunction, allowedInstanceOf, allowedInteger, allowedIntegerInRange, allowedList, allowedListSatisfying, allowedNaN, allowedNamedFunction, allowedNativeFunction, allowedNonEmptyString, allowedNumber, allowedNumberInRange, allowedObject, allowedOneOf, allowedOrdinal, allowedPlainObject, allowedPromise, allowedRegExp, allowedScriptedFunction, allowedString, allowedStringMatching, allowedText, allowedTextline, allowedURL, allowedValueInheritingFrom, allowedVanillaObject, constrained, escaped, expectAnonymousFunction, expectArray, expectBoolean, expectCardinal, expectColor, expectDate, expectEMailAddress, expectError, expectFiniteNumber, expectFunction, expectInstanceOf, expectInteger, expectIntegerInRange, expectList, expectListSatisfying, expectNaN, expectNamedFunction, expectNativeFunction, expectNonEmptyString, expectNumber, expectNumberInRange, expectObject, expectOneOf, expectOrdinal, expectPlainObject, expectPromise, expectRegExp, expectScriptedFunction, expectString, expectStringMatching, expectText, expectTextline, expectURL, expectValue, expectValueInheritingFrom, expectVanillaObject, expectedAnonymousFunction, expectedArray, expectedBoolean, expectedCardinal, expectedColor, expectedDate, expectedEMailAddress, expectedError, expectedFiniteNumber, expectedFunction, expectedInstanceOf, expectedInteger, expectedIntegerInRange, expectedList, expectedListSatisfying, expectedNaN, expectedNamedFunction, expectedNativeFunction, expectedNonEmptyString, expectedNumber, expectedNumberInRange, expectedObject, expectedOneOf, expectedOrdinal, expectedPlainObject, expectedPromise, expectedRegExp, expectedScriptedFunction, expectedString, expectedStringMatching, expectedText, expectedTextline, expectedURL, expectedValue, expectedValueInheritingFrom, expectedVanillaObject, global, quotable, quoted, rejectNil, shortHexColor, throwError, unescaped, validatedArgument };\n//# sourceMappingURL=javascript-interface-library.esm.js.map\n","//----------------------------------------------------------------------------//\n//                                 SVG-Turtle                                 //\n//----------------------------------------------------------------------------//\n\n  import {\n    throwError,\n    ValueIsFiniteNumber, ValueIsNumberInRange, ValueIsPlainObject,\n    ValueIsOneOf, ValueIsColor,\n    ValidatorForClassifier, acceptNil, rejectNil,\n    allowFiniteNumber, expectFiniteNumber, allowOneOf\n  } from 'javascript-interface-library'\n\n  export type TUR_Location  = number         // mainly for illustrative purposes\n  export type TUR_Dimension = number                                     // dto.\n  export type TUR_Angle     = number                                     // dto.\n  export type TUR_Color     = string                                     // dto.\n\n  export const TUR_Lineatures = ['solid','dotted','dashed']\n  export type  TUR_Lineature  = typeof TUR_Lineatures[number]\n\n  export const TUR_Joins = ['bevel','miter','round']\n  export type  TUR_Join  = typeof TUR_Joins[number]\n\n  export const TUR_Caps = ['butt','round','square']\n  export type  TUR_Cap  = typeof TUR_Caps[number]\n\n  export type TUR_PathOptionSet = {\n    x?:TUR_Location, y?:TUR_Location, Direction?:TUR_Angle,\n    Width?:TUR_Dimension, Color?:TUR_Color, Fill?:TUR_Color,\n    Lineature?:TUR_Lineature, Join?:TUR_Join, Cap?:TUR_Cap\n  }\n\n  export type TUR_Position = {\n    x:TUR_Location, y:TUR_Location\n  }\n\n  export type TUR_Alignment = {\n    x:TUR_Location, y:TUR_Location, Direction:TUR_Angle\n  }\n\n/**** ValueIsPosition ****/\n\n  export function ValueIsPosition (Value:any):boolean {\n    return (\n      ValueIsPlainObject(Value)    &&\n      ValueIsFiniteNumber(Value.x) &&\n      ValueIsFiniteNumber(Value.y)\n    )\n  }\n\n/**** allow/expect[ed]Position ****/\n\n  export const allowPosition = ValidatorForClassifier(\n    ValueIsPosition, acceptNil, 'turtle position'\n  ), allowedPosition = allowPosition\n\n  export const expectPosition = ValidatorForClassifier(\n    ValueIsPosition, rejectNil, 'turtle position'\n  ), expectedPosition = expectPosition\n\n/**** ValueIsAlignment ****/\n\n  export function ValueIsAlignment (Value:any):boolean {\n    return (\n      ValueIsPlainObject(Value)    &&\n      ValueIsFiniteNumber(Value.x) &&\n      ValueIsFiniteNumber(Value.y) &&\n      ValueIsFiniteNumber(Value.Direction)\n    )\n  }\n\n/**** allow/expect[ed]Alignment ****/\n\n  export const allowAlignment = ValidatorForClassifier(\n    ValueIsAlignment, acceptNil, 'turtle alignment'\n  ), allowedAlignment = allowAlignment\n\n  export const expectAlignment = ValidatorForClassifier(\n    ValueIsAlignment, rejectNil, 'turtle alignment'\n  ), expectedAlignment = expectAlignment\n\n/**** ValueIsPathOptionSet ****/\n\n  export function ValueIsPathOptionSet (Value:any):boolean {\n    return (\n      ValueIsPlainObject(Value) &&\n      ((Value.x == null)         || ValueIsFiniteNumber(Value.x)) &&\n      ((Value.y == null)         || ValueIsFiniteNumber(Value.y)) &&\n      ((Value.Direction == null) || ValueIsFiniteNumber(Value.Direction)) &&\n      ((Value.Width == null)     || ValueIsNumberInRange(Value.Width, 0)) &&\n      ((Value.Color == null)     || ValueIsColor(Value.Color)) &&\n      ((Value.Fill == null)      || ValueIsColor(Value.Fill)) &&\n      ((Value.Lineature == null) || ValueIsOneOf(Value.Lineature,TUR_Lineatures)) &&\n      ((Value.Join == null)      || ValueIsOneOf(Value.Join,TUR_Joins)) &&\n      ((Value.Cap == null)       || ValueIsOneOf(Value.Cap,TUR_Caps))\n    )\n  }\n\n/**** allow/expect[ed]PathOptionSet ****/\n\n  export const allowPathOptionSet = ValidatorForClassifier(\n    ValueIsPathOptionSet, acceptNil, 'turtle path option set'\n  ), allowedPathOptionSet = allowPathOptionSet\n\n  export const expectPathOptionSet = ValidatorForClassifier(\n    ValueIsPathOptionSet, rejectNil, 'turtle path option set'\n  ), expectedPathOptionSet = expectPathOptionSet\n\n/**** Graphic ****/\n\n  export class Graphic {\n    private SVGContent:string            = ''\n    private currentPath:string|undefined = undefined\n\n    private minX:TUR_Location|undefined;  private maxX:TUR_Location|undefined\n    private minY:TUR_Location|undefined;  private maxY:TUR_Location|undefined\n\n    private currentX:TUR_Location          = 0\n    private currentY:TUR_Location          = 0\n    private currentDirection:TUR_Angle     = 0\n\n    private currentWidth:TUR_Dimension     = 1\n    private currentColor:TUR_Color         = '#000000'\n    private currentFill:TUR_Color          = 'none'\n    private currentLineature:TUR_Lineature = 'solid'\n    private currentJoin:TUR_Join           = 'round'\n    private currentCap:TUR_Cap             = 'round'\n\n  /**** _initialize ****/\n\n    private _initialize ():void {\n      if (this.currentX         == null) { this.currentX         = 0 }\n      if (this.currentY         == null) { this.currentY         = 0 }\n      if (this.currentDirection == null) { this.currentDirection = 0 }\n\n      if (this.currentWidth     == null) { this.currentWidth     = 1 }\n      if (this.currentColor     == null) { this.currentColor     = '#000000' }\n      if (this.currentFill      == null) { this.currentFill      = 'none' }\n      if (this.currentLineature == null) { this.currentLineature = 'solid' }\n      if (this.currentJoin      == null) { this.currentJoin      = 'round' }\n      if (this.currentCap       == null) { this.currentCap       = 'round' }\n    }\n\n  /**** reset ****/\n\n    public reset ():Graphic {\n      this.currentX         = 0\n      this.currentY         = 0\n      this.currentDirection = 0\n\n      this.currentWidth     = 1\n      this.currentColor     = '#000000'\n      this.currentFill      = 'none'\n      this.currentLineature = 'solid'\n      this.currentJoin      = 'round'\n      this.currentCap       = 'round'\n\n      return this\n    }\n\n  /**** beginPath ****/\n\n    public beginPath (PathOptionSet?:TUR_PathOptionSet):Graphic {\n      allowPathOptionSet('option set',PathOptionSet)\n\n      if (this.currentPath != null) {\n        this.endPath()\n      }\n\n      this._initialize()\n\n      if (PathOptionSet != null) {\n        if (PathOptionSet.x         != null) { this.currentX         = PathOptionSet.x as TUR_Location }\n        if (PathOptionSet.y         != null) { this.currentY         = PathOptionSet.y as TUR_Location }\n        if (PathOptionSet.Direction != null) { this.currentDirection = PathOptionSet.Direction as TUR_Angle }\n        if (PathOptionSet.Width     != null) { this.currentWidth     = PathOptionSet.Width as TUR_Dimension }\n        if (PathOptionSet.Color     != null) { this.currentColor     = PathOptionSet.Color as TUR_Color }\n        if (PathOptionSet.Fill      != null) { this.currentFill      = PathOptionSet.Fill as TUR_Color }\n        if (PathOptionSet.Lineature != null) { this.currentLineature = PathOptionSet.Lineature as TUR_Lineature }\n        if (PathOptionSet.Join      != null) { this.currentJoin      = PathOptionSet.Join as TUR_Join }\n        if (PathOptionSet.Cap       != null) { this.currentCap       = PathOptionSet.Cap as TUR_Cap }\n      }\n\n      if (this.minX == null) {\n        this.minX = this.maxX = this.currentX\n        this.minY = this.maxY = this.currentY\n      }\n\n      this.currentPath = '<path ' +\n        'fill=\"'            + this.currentFill  + '\" ' +\n        'stroke=\"'          + this.currentColor + '\" ' +\n        'stroke-width=\"'    + this.currentWidth + '\" ' +\n        'stroke-linejoin=\"' + this.currentJoin  + '\" ' +\n        'stroke-linecap=\"'  + this.currentCap   + '\" '\n\n        switch (this.currentLineature) {\n          case 'dotted':\n            this.currentPath += 'stroke-dasharray=\"1\" '\n            break\n          case 'dashed':\n            this.currentPath += 'stroke-dasharray=\"3 1\" '\n            break\n          case 'solid': default:\n            this.currentPath += 'stroke-dasharray=\"none\" '\n        }\n      this.currentPath += 'd=\"'\n\n      this.moveTo(this.currentX,this.currentY)\n\n      return this\n    }\n\n  /**** turn ****/\n\n    public turn (DirectionChange:TUR_Angle):Graphic {\n      expectFiniteNumber('direction change',DirectionChange)\n\n      this.currentDirection += DirectionChange\n\n      return this\n    }\n\n  /**** turnTo ****/\n\n    public turnTo (Direction:TUR_Angle):Graphic {\n      expectFiniteNumber('direction',Direction)\n\n      this.currentDirection = Direction\n\n      return this\n    }\n\n  /**** turnLeft ****/\n\n    public turnLeft (DirectionChange:TUR_Angle):Graphic {\n      expectFiniteNumber('direction change',DirectionChange)\n\n      this.currentDirection -= DirectionChange\n\n      return this\n    }\n\n  /**** turnRight ****/\n\n    public turnRight (DirectionChange:TUR_Angle):Graphic {\n      expectFiniteNumber('direction change',DirectionChange)\n\n      this.currentDirection += DirectionChange\n\n      return this\n    }\n\n  /**** move ****/\n\n    public move (Distance:TUR_Location):Graphic {\n      expectFiniteNumber('distance',Distance)\n\n      let DirectionInRadians = this.currentDirection * Math.PI/180\n      this.moveTo(                                               // DRY approach\n        (this.currentX || 0) + Distance * Math.cos(DirectionInRadians),\n        (this.currentY || 0) + Distance * Math.sin(DirectionInRadians)\n      )\n\n      return this\n    }\n\n  /**** moveTo ****/\n\n    public moveTo (x:TUR_Location, y:TUR_Location):Graphic {\n      expectFiniteNumber('x coordinate',x)\n      expectFiniteNumber('y coordinate',y)\n\n      this.currentX = x\n      this.currentY = y\n\n      if (this.currentPath != null) {\n        this.currentPath += 'M ' + rounded(x) + ',' + rounded(y) + ' '\n      }\n\n      return this\n    }\n\n  /**** draw ****/\n\n    public draw (Distance:TUR_Location):Graphic {\n      expectFiniteNumber('distance',Distance)\n\n      let DirectionInRadians = this.currentDirection * Math.PI/180\n      this.drawTo(                                               // DRY approach\n        (this.currentX || 0) + Distance * Math.cos(DirectionInRadians),\n        (this.currentY || 0) + Distance * Math.sin(DirectionInRadians)\n      )\n\n      return this\n    }\n\n  /**** drawTo ****/\n\n    public drawTo (x:TUR_Location, y:TUR_Location):Graphic {\n      expectFiniteNumber('x coordinate',x)\n      expectFiniteNumber('y coordinate',y)\n\n      if (this.currentPath == null) {\n        this.beginPath()\n      }\n\n      this._updateBoundingBox(\n        this.currentX-this.currentWidth/2, this.currentX+this.currentWidth/2,\n        this.currentY-this.currentWidth/2, this.currentY+this.currentWidth/2\n      )\n\n      this.currentX = x\n      this.currentY = y\n\n      this.currentPath += 'L ' + rounded(x) + ',' + rounded(y) + ' '\n\n      this._updateBoundingBox(\n        this.currentX-this.currentWidth/2, this.currentX+this.currentWidth/2,\n        this.currentY-this.currentWidth/2, this.currentY+this.currentWidth/2\n      )\n\n      return this\n    }\n\n  /**** curveLeft/Right ****/\n\n    public curveLeft (\n      Angle:TUR_Angle, rx:TUR_Dimension, ry?:TUR_Dimension\n    ):Graphic {\n      return this._curve(Angle, rx,ry, false)\n    }\n\n    public curveRight (\n      Angle:TUR_Angle, rx:TUR_Dimension, ry?:TUR_Dimension\n    ):Graphic {\n      return this._curve(Angle, rx,ry, true)\n    }\n\n  /**** _curve ****/\n\n    private _curve (\n      Angle:TUR_Angle, rx:TUR_Dimension, ry:TUR_Dimension|undefined,\n      clockwise:boolean\n    ):Graphic {\n      expectFiniteNumber('turn angle',Angle)\n      expectFiniteNumber  ('x radius',rx)\n      allowFiniteNumber   ('y radius',ry)\n        if (ry == null) { ry = rx }\n\n      let absAngle = Math.abs(Angle)\n      if (absAngle < 1e-6) { return this }\n\n      const pi      = Math.PI;    const sin = Math.sin\n      const deg2rad = pi/180;     const cos = Math.cos\n\n      if (this.currentPath == null) {\n        this.beginPath()\n      }\n\n    /**** fix ellipse starting point ****/\n\n      let x0 = this.currentX\n      let y0 = this.currentY\n\n      this._updateBoundingBox(\n        x0-this.currentWidth/2, x0+this.currentWidth/2,\n        y0-this.currentWidth/2, y0+this.currentWidth/2\n      )\n\n    /**** compute ellipse center ****/\n\n      let Direction          = this.currentDirection\n      let DirectionInRadians = Direction * deg2rad\n\n      let NormalInRadians = DirectionInRadians + (clockwise ? pi/2 : -pi/2)\n\n      let cx = x0 + ry * cos(NormalInRadians)                // \"ry\" is correct!\n      let cy = y0 + ry * sin(NormalInRadians)                            // dto.\n\n    /**** compute ellipse end point ****/\n\n      let AngleInRadians = (\n        clockwise ? -pi/2 + Angle * deg2rad : pi/2 - Angle * deg2rad\n      )\n\n      let auxX = rx * cos(AngleInRadians)\n      let auxY = ry * sin(AngleInRadians)\n\n      let x1 = cx + auxX * cos(DirectionInRadians) - auxY * sin(DirectionInRadians)\n      let y1 = cy + auxX * sin(DirectionInRadians) + auxY * cos(DirectionInRadians)\n\n    /**** construct SVG path ****/\n\n      let fullEllipse  = (absAngle >= 360)\n      let largeArcFlag = (absAngle >= 180 ? 1 : 0)\n      let SweepFlag    = (clockwise ? (Angle >= 0 ? 1 : 0) : (Angle >= 0 ? 0 : 1))\n\n      if (fullEllipse) {\n        auxX = cx + (cx-x0)\n        auxY = cy + (cy-y0)\n\n        this.currentPath += (\n          'A ' + rounded(rx) + ' ' + rounded(ry) + ' ' +\n          rounded(Direction) + ' 1 ' + SweepFlag + ' ' +\n          rounded(auxX) + ' ' + rounded(auxY) + ' '\n        ) + (\n          'A ' + rounded(rx) + ' ' + rounded(ry) + ' ' +\n          rounded(Direction) + ' 1 ' + SweepFlag + ' ' +\n          rounded(x0) + ' ' + rounded(y0) + ' '\n        ) + 'M ' + rounded(x1) + ' ' + rounded(y1) + ' '\n      } else {\n        this.currentPath += (\n          'A ' + rounded(rx) + ' ' + rounded(ry) + ' ' +\n          rounded(Direction) + ' ' + largeArcFlag + ' ' + SweepFlag + ' ' +\n          rounded(x1) + ' ' + rounded(y1) + ' '\n        )\n      }\n\n    /**** compute ellipse x/y bounds in rotated coordinate system ****/\n// see https://math.stackexchange.com/questions/91132/how-to-get-the-limits-of-rotated-ellipse\n\n      let xMax = Math.sqrt(               // still centered at origin, not cx/cy\n        rx*rx * Math.pow(cos(DirectionInRadians),2) +\n        ry*ry * Math.pow(sin(DirectionInRadians),2)\n      )\n      let yMax = Math.sqrt(                                              // dto.\n        rx*rx * Math.pow(sin(DirectionInRadians),2) +\n        ry*ry * Math.pow(cos(DirectionInRadians),2)\n      )\n\n      for (let i = 0; i < 4; i++) {\n        let xSign = (i % 2 === 0 ? 1 : -1)\n        let ySign = (i < 2       ? 1 : -1)\n\n        let x = xSign*xMax\n        let y = ySign*yMax\n\n        let PointShouldBeUsed\n        if (fullEllipse) {\n          PointShouldBeUsed = true\n        } else {\n        /**** rotate extremal points back into ellipse coordinates ****/\n\n          let maxX = x * cos(-DirectionInRadians) - y * sin(-DirectionInRadians)\n          let maxY = x * sin(-DirectionInRadians) + y * cos(-DirectionInRadians)\n\n          maxX = maxX / rx\n          maxY = maxY / ry\n\n        /**** compute extremal point angles and check if within arc ****/\n\n          let PointAngleInRadians = Math.atan2(maxY,maxX)\n\n          let StartAngleInRadians = (clockwise ? -pi/2 : pi/2)\n          let EndAngleInRadians   = AngleInRadians           // already computed\n\n          if ((StartAngleInRadians < -pi) || (EndAngleInRadians < -pi)) {\n            StartAngleInRadians += 2*pi         // that's sufficient, because...\n            EndAngleInRadians   += 2*pi        // ...\"fullEllipse\" is false here\n          }\n\n          if (StartAngleInRadians > EndAngleInRadians) {\n            let temp = StartAngleInRadians\n            StartAngleInRadians = EndAngleInRadians\n            EndAngleInRadians = temp\n          }\n\n          PointShouldBeUsed = (                                  // common cases\n            (StartAngleInRadians <= PointAngleInRadians) &&\n            (PointAngleInRadians <= EndAngleInRadians)\n          ) || (                                                   // rare cases\n            (PointAngleInRadians < 0) &&\n            (StartAngleInRadians <= PointAngleInRadians + 2*pi) &&\n            (PointAngleInRadians + 2*pi <= EndAngleInRadians)\n          )\n        }\n\n        if (PointShouldBeUsed) {\n          this._updateBoundingBox(\n            cx + x-this.currentWidth/2, cx + x+this.currentWidth/2,\n            cy + y-this.currentWidth/2, cy + y+this.currentWidth/2\n          )\n        }\n      }\n\n    /**** update turtle ****/\n\n      this.currentDirection += (Angle >= 0 ? Angle : 180+Angle) * (clockwise ? 1 : -1)\n\n      this.currentX = x1\n      this.currentY = y1\n\n      this._updateBoundingBox(\n        x1-this.currentWidth/2, x1+this.currentWidth/2,\n        y1-this.currentWidth/2, y1+this.currentWidth/2\n      )\n\n      return this\n    }\n\n  /**** endPath ****/\n\n    public endPath ():Graphic {\n      if (this.currentPath != null) {\n        this.currentPath += '\"/>'\n\n        this.SVGContent += this.currentPath\n        this.currentPath = undefined\n      }\n\n      return this\n    }\n\n  /**** closePath ****/\n\n    public closePath ():Graphic {\n      if (this.currentPath != null) {\n        this.currentPath += 'Z'\n        this.endPath()\n      }\n\n      return this\n    }\n\n  /**** currentPosition ****/\n\n    public currentPosition ():TUR_Position {\n      return { x:this.currentX, y:this.currentY }\n    }\n\n  /**** positionAt ****/\n\n    public positionAt (Position:TUR_Position):Graphic {\n      allowPosition('turtle position',Position)\n\n      if (this.currentPath == null) {\n        this.currentX = Position.x\n        this.currentY = Position.y\n      } else {\n        this.moveTo(Position.x,Position.y)\n      }\n\n      return this\n    }\n\n  /**** currentAlignment ****/\n\n    public currentAlignment ():TUR_Alignment {\n      return {\n        x:this.currentX, y:this.currentY, Direction:this.currentDirection\n      }\n    }\n\n  /**** alignAt ****/\n\n    public alignAt (Alignment:TUR_Alignment):Graphic {\n      allowAlignment('turtle alignment',Alignment)\n\n      this.currentDirection = Alignment.Direction\n\n      if (this.currentPath == null) {\n        this.currentX = Alignment.x\n        this.currentY = Alignment.y\n      } else {\n        this.moveTo(Alignment.x,Alignment.y)\n      }\n\n      return this\n    }\n\n  /**** Limits ****/\n\n    public Limits ():{\n      xMin:number, yMin:number, xMax:number,yMax:number\n    } {\n      return {\n        xMin:this.minX || 0, yMin:this.minY || 0,\n        xMax:this.maxX || 0, yMax:this.maxY || 0\n      }\n    }\n\n  /**** asSVG ****/\n\n    public asSVG (\n      Unit?:'px'|'mm'|'cm'|'in',\n      xMin?:number,yMin?:number, xMax?:number,yMax?:number\n    ):string {\n      allowOneOf('SVG unit',Unit, ['px','mm','cm','in'])\n      allowFiniteNumber('minimal x',xMin)\n      allowFiniteNumber('maximal x',xMax)\n      allowFiniteNumber('minimal y',yMin)\n      allowFiniteNumber('maximal y',yMax)\n\n      if (this.minX == null) {  // very special case: nothing has been drawn yet\n        this.minX = this.maxX = this.minY = this.maxY = 0\n      }\n\n      if (Unit == null) { Unit = 'px' }\n      if (xMin == null) { xMin = this.minX }\n      if (xMax == null) { xMax = this.maxX }\n      if (yMin == null) { yMin = this.minY }\n      if (yMax == null) { yMax = this.maxY }\n\n// @ts-ignore TS2532 we know that xMax and xMin are defined\n      let Width  = xMax-xMin\n// @ts-ignore TS2532 we know that yMax and yMin are defined\n      let Height = yMax-yMin\n\n      if (Width  < 0) throwError('InvalidArgument: invalid x range given')\n      if (Height < 0) throwError('InvalidArgument: invalid y range given')\n\n      if (this.currentPath != null) {         // if need be: end an ongoing path\n        this.endPath()\n      }\n\n      return (\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n          'width=\"'  + rounded(Width)  + Unit + '\" ' +\n          'height=\"' + rounded(Height) + Unit + '\" ' +\n// @ts-ignore TS2532 we know that xMin and yMin are defined\n          'viewBox=\"' + floored(xMin) + ' ' + floored(yMin) + ' ' +\n            ceiled(Width) + ' ' + ceiled(Height) + '\" ' +\n          'vector-effect=\"non-scaling-stroke\"' +\n        '>' +\n          this.SVGContent +\n        '</svg>'\n      )\n    }\n\n  /**** asSVGwith72dpi ****/\n\n    public asSVGwith72dpi (\n      Unit?:'px'|'mm'|'cm'|'in',\n      xMin?:number,yMin?:number, xMax?:number,yMax?:number\n    ):string {\n      let SVG = this.asSVG(Unit, xMin,yMin, xMax,yMax)   // also validates arg.s\n\n      let Scale = 72 / {\n        'px':25.4, 'mm':25.4, 'cm':2.54, 'in':1\n      }[Unit || 'mm']\n\n      if (xMin == null) { xMin = this.minX }\n      if (xMax == null) { xMax = this.maxX }\n      if (yMin == null) { yMin = this.minY }\n      if (yMax == null) { yMax = this.maxY }\n\n      return (\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n// @ts-ignore TS2532 we know that xMin and yMin are defined\n          'viewBox=\"' + floored(Scale*xMin) + ' ' + floored(Scale*yMin) + ' ' +\n// @ts-ignore TS2532 we know that xMin,xMax,yMin and yMax are defined\n            ceiled(Scale*(xMax-xMin)) + ' ' + ceiled(Scale*(yMax-yMin)) + '\" ' +\n          'vector-effect=\"non-scaling-stroke\"' +\n        '>' +\n        '<g transform=\"scale(' + Scale + ',' + Scale + ')\">' +\n          SVG +\n        '</g></svg>'\n      )\n    }\n\n  /**** _updateBoundingBox ****/\n\n    private _updateBoundingBox (\n      minX:TUR_Location, maxX:TUR_Location,\n      minY:TUR_Location, maxY:TUR_Location\n    ):void {\n      this.minX = Math.min(this.minX as TUR_Location,minX)\n      this.maxX = Math.max(this.maxX as TUR_Location,maxX)\n\n      this.minY = Math.min(this.minY as TUR_Location,minY)\n      this.maxY = Math.max(this.maxY as TUR_Location,maxY)\n    }\n  }\n\n/**** rounded ****/\n\n  function rounded (Value:number):number {\n    return Math.round(Value*100)/100\n  }\n\n/**** ceiled ****/\n\n  function ceiled (Value:number):number {\n    return Math.ceil(Value*100)/100\n  }\n\n/**** floored ****/\n\n  function floored (Value:number):number {\n    return Math.floor(Value*100)/100\n  }\n\n"],"names":["throwError","Message","Match","exec","Error","namedError","name","ValueIsFiniteNumber","Value","Number","isFinite","valueOf","ValueIsNumberInRange","minValue","maxValue","withMin","withMax","ValueIsNumber","isNaN","ValueIsPlainObject","Object","getPrototypeOf","prototype","ValueIsOneOf","ValueList","indexOf","ValueIsColor","String","ValueIsString","ColorSet","hasOwnProperty","test","rejectNil","acceptNil","ValidatorForClassifier","Classifier","NilIsAcceptable","Expectation","Validator","Description","Argument","ValueIsValid","concat","escaped","Boolean","validatedArgument","ClassifierName","originalFunction","desiredName","defineProperty","value","signal","Function","renamed","FunctionWithName","replace","allowFiniteNumber","expectFiniteNumber","expectedOneOf","Text","HexCode","charCodeAt","toString","slice","length","transparent","aliceblue","lightpink","antiquewhite","lightsalmon","aqua","lightseagreen","aquamarine","lightskyblue","azure","lightslategray","beige","lightslategrey","bisque","lightsteelblue","black","lightyellow","blanchedalmond","lime","blue","limegreen","blueviolet","linen","brown","magenta","burlywood","maroon","cadetblue","mediumaquamarine","chartreuse","mediumblue","chocolate","mediumorchid","coral","mediumpurple","cornflowerblue","mediumseagreen","cornsilk","mediumslateblue","crimson","mediumspringgreen","cyan","mediumturquoise","darkblue","mediumvioletred","darkcyan","midnightblue","darkgoldenrod","mintcream","darkgray","mistyrose","darkgreen","moccasin","darkgrey","navajowhite","darkkhaki","navy","darkmagenta","oldlace","darkolivegreen","olive","darkorange","olivedrab","darkorchid","orange","darkred","orangered","darksalmon","orchid","darkseagreen","palegoldenrod","darkslateblue","palegreen","darkslategray","paleturquoise","darkslategrey","palevioletred","darkturquoise","papayawhip","darkviolet","peachpuff","deeppink","peru","deepskyblue","pink","dimgray","plum","dimgrey","powderblue","dodgerblue","purple","firebrick","red","floralwhite","rosybrown","forestgreen","royalblue","fuchsia","saddlebrown","gainsboro","salmon","ghostwhite","sandybrown","gold","seagreen","goldenrod","seashell","gray","sienna","green","silver","greenyellow","skyblue","grey","slateblue","honeydew","slategray","hotpink","slategrey","indianred","snow","indigo","springgreen","ivory","steelblue","khaki","tan","lavender","teal","lavenderblush","thistle","lawngreen","tomato","lemonchiffon","turquoise","lightblue","violet","lightcoral","wheat","lightcyan","white","lightgoldenrodyellow","whitesmoke","lightgray","yellow","lightgreen","yellowgreen","lightgrey","TUR_Lineatures","TUR_Joins","TUR_Caps","ValueIsPosition","x","y","allowPosition","allowedPosition","expectPosition","expectedPosition","ValueIsAlignment","Direction","allowAlignment","allowedAlignment","expectAlignment","expectedAlignment","ValueIsPathOptionSet","Width","Color","Fill","Lineature","Join","Cap","allowPathOptionSet","allowedPathOptionSet","expectPathOptionSet","expectedPathOptionSet","Graphic","this","SVGContent","currentPath","undefined","currentX","currentY","currentDirection","currentWidth","currentColor","currentFill","currentLineature","currentJoin","currentCap","_initialize","reset","beginPath","PathOptionSet","endPath","minX","maxX","minY","maxY","moveTo","turn","DirectionChange","turnTo","turnLeft","turnRight","move","Distance","DirectionInRadians","Math","PI","cos","sin","rounded","draw","drawTo","_updateBoundingBox","curveLeft","Angle","rx","ry","_curve","curveRight","clockwise","absAngle","abs","pi","deg2rad","x0","y0","NormalInRadians","cx","cy","AngleInRadians","auxX","auxY","x1","y1","fullEllipse","largeArcFlag","SweepFlag","xMax","sqrt","pow","yMax","i","PointShouldBeUsed","PointAngleInRadians","atan2","StartAngleInRadians","EndAngleInRadians","temp","closePath","currentPosition","positionAt","Position","currentAlignment","alignAt","Alignment","Limits","xMin","yMin","asSVG","Unit","Height","floored","ceiled","asSVGwith72dpi","SVG","Scale","px","mm","cm","in","min","max","round","ceil","floor"],"mappings":"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"}